/*
Copyright 2021 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "knative.dev/eventing/pkg/apis/eventing/v1alpha1"
)

// FakeEventTypeDefinitions implements EventTypeDefinitionInterface
type FakeEventTypeDefinitions struct {
	Fake *FakeEventingV1alpha1
	ns   string
}

var eventtypedefinitionsResource = schema.GroupVersionResource{Group: "eventing.knative.dev", Version: "v1alpha1", Resource: "eventtypedefinitions"}

var eventtypedefinitionsKind = schema.GroupVersionKind{Group: "eventing.knative.dev", Version: "v1alpha1", Kind: "EventTypeDefinition"}

// Get takes name of the eventTypeDefinition, and returns the corresponding eventTypeDefinition object, and an error if there is any.
func (c *FakeEventTypeDefinitions) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.EventTypeDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(eventtypedefinitionsResource, c.ns, name), &v1alpha1.EventTypeDefinition{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EventTypeDefinition), err
}

// List takes label and field selectors, and returns the list of EventTypeDefinitions that match those selectors.
func (c *FakeEventTypeDefinitions) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.EventTypeDefinitionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(eventtypedefinitionsResource, eventtypedefinitionsKind, c.ns, opts), &v1alpha1.EventTypeDefinitionList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.EventTypeDefinitionList{ListMeta: obj.(*v1alpha1.EventTypeDefinitionList).ListMeta}
	for _, item := range obj.(*v1alpha1.EventTypeDefinitionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested eventTypeDefinitions.
func (c *FakeEventTypeDefinitions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(eventtypedefinitionsResource, c.ns, opts))

}

// Create takes the representation of a eventTypeDefinition and creates it.  Returns the server's representation of the eventTypeDefinition, and an error, if there is any.
func (c *FakeEventTypeDefinitions) Create(ctx context.Context, eventTypeDefinition *v1alpha1.EventTypeDefinition, opts v1.CreateOptions) (result *v1alpha1.EventTypeDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(eventtypedefinitionsResource, c.ns, eventTypeDefinition), &v1alpha1.EventTypeDefinition{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EventTypeDefinition), err
}

// Update takes the representation of a eventTypeDefinition and updates it. Returns the server's representation of the eventTypeDefinition, and an error, if there is any.
func (c *FakeEventTypeDefinitions) Update(ctx context.Context, eventTypeDefinition *v1alpha1.EventTypeDefinition, opts v1.UpdateOptions) (result *v1alpha1.EventTypeDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(eventtypedefinitionsResource, c.ns, eventTypeDefinition), &v1alpha1.EventTypeDefinition{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EventTypeDefinition), err
}

// Delete takes name of the eventTypeDefinition and deletes it. Returns an error if one occurs.
func (c *FakeEventTypeDefinitions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(eventtypedefinitionsResource, c.ns, name, opts), &v1alpha1.EventTypeDefinition{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeEventTypeDefinitions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(eventtypedefinitionsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.EventTypeDefinitionList{})
	return err
}

// Patch applies the patch and returns the patched eventTypeDefinition.
func (c *FakeEventTypeDefinitions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.EventTypeDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(eventtypedefinitionsResource, c.ns, name, pt, data, subresources...), &v1alpha1.EventTypeDefinition{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EventTypeDefinition), err
}
