/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing/pkg/apis/feeds/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterEventSourceLister helps list ClusterEventSources.
type ClusterEventSourceLister interface {
	// List lists all ClusterEventSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterEventSource, err error)
	// ClusterEventSources returns an object that can list and get ClusterEventSources.
	ClusterEventSources(namespace string) ClusterEventSourceNamespaceLister
	ClusterEventSourceListerExpansion
}

// clusterEventSourceLister implements the ClusterEventSourceLister interface.
type clusterEventSourceLister struct {
	indexer cache.Indexer
}

// NewClusterEventSourceLister returns a new ClusterEventSourceLister.
func NewClusterEventSourceLister(indexer cache.Indexer) ClusterEventSourceLister {
	return &clusterEventSourceLister{indexer: indexer}
}

// List lists all ClusterEventSources in the indexer.
func (s *clusterEventSourceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterEventSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterEventSource))
	})
	return ret, err
}

// ClusterEventSources returns an object that can list and get ClusterEventSources.
func (s *clusterEventSourceLister) ClusterEventSources(namespace string) ClusterEventSourceNamespaceLister {
	return clusterEventSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterEventSourceNamespaceLister helps list and get ClusterEventSources.
type ClusterEventSourceNamespaceLister interface {
	// List lists all ClusterEventSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterEventSource, err error)
	// Get retrieves the ClusterEventSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterEventSource, error)
	ClusterEventSourceNamespaceListerExpansion
}

// clusterEventSourceNamespaceLister implements the ClusterEventSourceNamespaceLister
// interface.
type clusterEventSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterEventSources in the indexer for a given namespace.
func (s clusterEventSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterEventSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterEventSource))
	})
	return ret, err
}

// Get retrieves the ClusterEventSource from the indexer for a given namespace and name.
func (s clusterEventSourceNamespaceLister) Get(name string) (*v1alpha1.ClusterEventSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustereventsource"), name)
	}
	return obj.(*v1alpha1.ClusterEventSource), nil
}
