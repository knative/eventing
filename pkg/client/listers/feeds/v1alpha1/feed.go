/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing/pkg/apis/feeds/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeedLister helps list Feeds.
type FeedLister interface {
	// List lists all Feeds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Feed, err error)
	// Feeds returns an object that can list and get Feeds.
	Feeds(namespace string) FeedNamespaceLister
	FeedListerExpansion
}

// feedLister implements the FeedLister interface.
type feedLister struct {
	indexer cache.Indexer
}

// NewFeedLister returns a new FeedLister.
func NewFeedLister(indexer cache.Indexer) FeedLister {
	return &feedLister{indexer: indexer}
}

// List lists all Feeds in the indexer.
func (s *feedLister) List(selector labels.Selector) (ret []*v1alpha1.Feed, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Feed))
	})
	return ret, err
}

// Feeds returns an object that can list and get Feeds.
func (s *feedLister) Feeds(namespace string) FeedNamespaceLister {
	return feedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FeedNamespaceLister helps list and get Feeds.
type FeedNamespaceLister interface {
	// List lists all Feeds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Feed, err error)
	// Get retrieves the Feed from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Feed, error)
	FeedNamespaceListerExpansion
}

// feedNamespaceLister implements the FeedNamespaceLister
// interface.
type feedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Feeds in the indexer for a given namespace.
func (s feedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Feed, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Feed))
	})
	return ret, err
}

// Get retrieves the Feed from the indexer for a given namespace and name.
func (s feedNamespaceLister) Get(name string) (*v1alpha1.Feed, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("feed"), name)
	}
	return obj.(*v1alpha1.Feed), nil
}
