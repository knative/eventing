/*
Copyright 2021 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing/pkg/apis/eventing/v1alpha1"
)

// EventTypeDefinitionLister helps list EventTypeDefinitions.
// All objects returned here must be treated as read-only.
type EventTypeDefinitionLister interface {
	// List lists all EventTypeDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventTypeDefinition, err error)
	// EventTypeDefinitions returns an object that can list and get EventTypeDefinitions.
	EventTypeDefinitions(namespace string) EventTypeDefinitionNamespaceLister
	EventTypeDefinitionListerExpansion
}

// eventTypeDefinitionLister implements the EventTypeDefinitionLister interface.
type eventTypeDefinitionLister struct {
	indexer cache.Indexer
}

// NewEventTypeDefinitionLister returns a new EventTypeDefinitionLister.
func NewEventTypeDefinitionLister(indexer cache.Indexer) EventTypeDefinitionLister {
	return &eventTypeDefinitionLister{indexer: indexer}
}

// List lists all EventTypeDefinitions in the indexer.
func (s *eventTypeDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.EventTypeDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventTypeDefinition))
	})
	return ret, err
}

// EventTypeDefinitions returns an object that can list and get EventTypeDefinitions.
func (s *eventTypeDefinitionLister) EventTypeDefinitions(namespace string) EventTypeDefinitionNamespaceLister {
	return eventTypeDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventTypeDefinitionNamespaceLister helps list and get EventTypeDefinitions.
// All objects returned here must be treated as read-only.
type EventTypeDefinitionNamespaceLister interface {
	// List lists all EventTypeDefinitions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventTypeDefinition, err error)
	// Get retrieves the EventTypeDefinition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EventTypeDefinition, error)
	EventTypeDefinitionNamespaceListerExpansion
}

// eventTypeDefinitionNamespaceLister implements the EventTypeDefinitionNamespaceLister
// interface.
type eventTypeDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventTypeDefinitions in the indexer for a given namespace.
func (s eventTypeDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventTypeDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventTypeDefinition))
	})
	return ret, err
}

// Get retrieves the EventTypeDefinition from the indexer for a given namespace and name.
func (s eventTypeDefinitionNamespaceLister) Get(name string) (*v1alpha1.EventTypeDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventtypedefinition"), name)
	}
	return obj.(*v1alpha1.EventTypeDefinition), nil
}
