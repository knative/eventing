/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProvisionerLister helps list Provisioners.
type ProvisionerLister interface {
	// List lists all Provisioners in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Provisioner, err error)
	// Provisioners returns an object that can list and get Provisioners.
	Provisioners(namespace string) ProvisionerNamespaceLister
	ProvisionerListerExpansion
}

// provisionerLister implements the ProvisionerLister interface.
type provisionerLister struct {
	indexer cache.Indexer
}

// NewProvisionerLister returns a new ProvisionerLister.
func NewProvisionerLister(indexer cache.Indexer) ProvisionerLister {
	return &provisionerLister{indexer: indexer}
}

// List lists all Provisioners in the indexer.
func (s *provisionerLister) List(selector labels.Selector) (ret []*v1alpha1.Provisioner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Provisioner))
	})
	return ret, err
}

// Provisioners returns an object that can list and get Provisioners.
func (s *provisionerLister) Provisioners(namespace string) ProvisionerNamespaceLister {
	return provisionerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisionerNamespaceLister helps list and get Provisioners.
type ProvisionerNamespaceLister interface {
	// List lists all Provisioners in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Provisioner, err error)
	// Get retrieves the Provisioner from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Provisioner, error)
	ProvisionerNamespaceListerExpansion
}

// provisionerNamespaceLister implements the ProvisionerNamespaceLister
// interface.
type provisionerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Provisioners in the indexer for a given namespace.
func (s provisionerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Provisioner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Provisioner))
	})
	return ret, err
}

// Get retrieves the Provisioner from the indexer for a given namespace and name.
func (s provisionerNamespaceLister) Get(name string) (*v1alpha1.Provisioner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provisioner"), name)
	}
	return obj.(*v1alpha1.Provisioner), nil
}
