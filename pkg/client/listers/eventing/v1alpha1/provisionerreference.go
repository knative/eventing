/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProvisionerReferenceLister helps list ProvisionerReferences.
type ProvisionerReferenceLister interface {
	// List lists all ProvisionerReferences in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisionerReference, err error)
	// ProvisionerReferences returns an object that can list and get ProvisionerReferences.
	ProvisionerReferences(namespace string) ProvisionerReferenceNamespaceLister
	ProvisionerReferenceListerExpansion
}

// provisionerReferenceLister implements the ProvisionerReferenceLister interface.
type provisionerReferenceLister struct {
	indexer cache.Indexer
}

// NewProvisionerReferenceLister returns a new ProvisionerReferenceLister.
func NewProvisionerReferenceLister(indexer cache.Indexer) ProvisionerReferenceLister {
	return &provisionerReferenceLister{indexer: indexer}
}

// List lists all ProvisionerReferences in the indexer.
func (s *provisionerReferenceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisionerReference, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisionerReference))
	})
	return ret, err
}

// ProvisionerReferences returns an object that can list and get ProvisionerReferences.
func (s *provisionerReferenceLister) ProvisionerReferences(namespace string) ProvisionerReferenceNamespaceLister {
	return provisionerReferenceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisionerReferenceNamespaceLister helps list and get ProvisionerReferences.
type ProvisionerReferenceNamespaceLister interface {
	// List lists all ProvisionerReferences in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisionerReference, err error)
	// Get retrieves the ProvisionerReference from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ProvisionerReference, error)
	ProvisionerReferenceNamespaceListerExpansion
}

// provisionerReferenceNamespaceLister implements the ProvisionerReferenceNamespaceLister
// interface.
type provisionerReferenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProvisionerReferences in the indexer for a given namespace.
func (s provisionerReferenceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisionerReference, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisionerReference))
	})
	return ret, err
}

// Get retrieves the ProvisionerReference from the indexer for a given namespace and name.
func (s provisionerReferenceNamespaceLister) Get(name string) (*v1alpha1.ProvisionerReference, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provisionerreference"), name)
	}
	return obj.(*v1alpha1.ProvisionerReference), nil
}
