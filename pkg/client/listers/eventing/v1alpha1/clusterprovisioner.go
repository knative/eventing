/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterProvisionerLister helps list ClusterProvisioners.
type ClusterProvisionerLister interface {
	// List lists all ClusterProvisioners in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterProvisioner, err error)
	// Get retrieves the ClusterProvisioner from the index for a given name.
	Get(name string) (*v1alpha1.ClusterProvisioner, error)
	ClusterProvisionerListerExpansion
}

// clusterProvisionerLister implements the ClusterProvisionerLister interface.
type clusterProvisionerLister struct {
	indexer cache.Indexer
}

// NewClusterProvisionerLister returns a new ClusterProvisionerLister.
func NewClusterProvisionerLister(indexer cache.Indexer) ClusterProvisionerLister {
	return &clusterProvisionerLister{indexer: indexer}
}

// List lists all ClusterProvisioners in the indexer.
func (s *clusterProvisionerLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterProvisioner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterProvisioner))
	})
	return ret, err
}

// Get retrieves the ClusterProvisioner from the index for a given name.
func (s *clusterProvisionerLister) Get(name string) (*v1alpha1.ClusterProvisioner, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterprovisioner"), name)
	}
	return obj.(*v1alpha1.ClusterProvisioner), nil
}
