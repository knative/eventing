/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by injection-gen. DO NOT EDIT.

package containersource

import (
	"context"
	"encoding/json"
	"fmt"

	"go.uber.org/zap"
	"k8s.io/apimachinery/pkg/api/equality"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"knative.dev/eventing/pkg/logging"
	"knative.dev/pkg/apis"
	"knative.dev/pkg/resolver"

	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	appsv1listers "k8s.io/client-go/listers/apps/v1"
	"knative.dev/eventing/pkg/apis/sources/v1alpha1"
	"knative.dev/eventing/pkg/client/injection/reconciler/sources/v1alpha1/containersource"
	listers "knative.dev/eventing/pkg/client/listers/sources/v1alpha1"
	"knative.dev/eventing/pkg/reconciler/containersource/resources"
	duckv1 "knative.dev/pkg/apis/duck/v1"
	pkgreconciler "knative.dev/pkg/reconciler"
)

// newReconciledNormal makes a new reconciler event with event type Normal, and
// reason ContainerSourceReconciled.
func newReconciledNormal(namespace, name string) pkgreconciler.Event {
	return pkgreconciler.NewEvent(corev1.EventTypeNormal, "ContainerSourceReconciled", "ContainerSource reconciled: \"%s/%s\"", namespace, name)
}

func newWarningSinkNotFound(sink *duckv1.Destination) pkgreconciler.Event {
	b, _ := json.Marshal(sink)
	return pkgreconciler.NewEvent(corev1.EventTypeWarning, "SinkNotFound", "Sink not found: %s", string(b))
}

// Reconciler implements controller.Reconciler for ContainerSource resources.
type Reconciler struct {
	kubeClientSet kubernetes.Interface

	// listers index properties about resources
	containerSourceLister listers.ContainerSourceLister
	deploymentLister      appsv1listers.DeploymentLister

	sinkResolver *resolver.URIResolver
}

// Check that our Reconciler implements Interface
var _ containersource.Interface = (*Reconciler)(nil)

// Optionally check that our Reconciler implements Finalizer
//var _ containersource.Finalizer = (*Reconciler)(nil)

// ReconcileKind implements Interface.ReconcileKind.
func (r *Reconciler) ReconcileKind(ctx context.Context, source *v1alpha1.ContainerSource) pkgreconciler.Event {
	source.Status.InitializeConditions()
	source.Status.ObservedGeneration = source.Generation

	dest := source.Spec.Sink.DeepCopy()
	if dest.Ref != nil {
		// To call URIFromDestinationV1(), dest.Ref must have a Namespace. If there is
		// no Namespace defined in dest.Ref, we will use the Namespace of the source
		// as the Namespace of dest.Ref.
		if dest.Ref.Namespace == "" {
			dest.Ref.Namespace = source.GetNamespace()
		}
	}

	sinkURI, err := r.sinkResolver.URIFromDestinationV1(*dest, source)
	if err != nil {
		source.Status.MarkNoSink("SinkNotFound", "")
		return newWarningSinkNotFound(dest)
	}
	source.Status.MarkSink(sinkURI)

	ra, err := r.reconcileReceiveAdapter(ctx, source, sinkURI)
	if err != nil {
		source.Status.MarkNotDeployed("DeploymentReconcileFailed", "Failed to reconcile deployment: %v", err)
		return err
	}
	source.Status.PropagateDeploymentAvailability(ra)
	return newReconciledNormal(source.Namespace, source.Name)
}

func (r *Reconciler) reconcileReceiveAdapter(ctx context.Context, source *v1alpha1.ContainerSource, sinkURI *apis.URL) (*appsv1.Deployment, error) {

	ceOverrides := r.marshalCeOverrides(ctx, source)
	args := &resources.ContainerSourceArgs{
		Source:      source,
		SinkURI:     sinkURI,
		CeOverrides: ceOverrides,
		Labels:      resources.Labels(source.Name),
	}
	expected := resources.MakeDeployment(args)

	ra, err := r.deploymentLister.Deployments(expected.Namespace).Get(expected.Name)
	if apierrors.IsNotFound(err) {
		ra, err = r.kubeClientSet.AppsV1().Deployments(expected.Namespace).Create(expected)
		if err != nil {
			return nil, fmt.Errorf("creating new deployment: %v", err)
		}
		return ra, nil
	} else if err != nil {
		return nil, fmt.Errorf("getting deployment: %v", err)
	} else if !metav1.IsControlledBy(ra, source) {
		return nil, fmt.Errorf("deployment %q is not owned by ContainerSource %q", ra.Name, source.Name)
	} else if r.podSpecChanged(ra.Spec.Template.Spec, expected.Spec.Template.Spec) {
		ra.Spec.Template.Spec = expected.Spec.Template.Spec
		ra, err = r.kubeClientSet.AppsV1().Deployments(expected.Namespace).Update(ra)
		if err != nil {
			return ra, fmt.Errorf("updating deployment: %v", err)
		}
		return ra, nil
	} else {
		logging.FromContext(ctx).Debug("Reusing existing receive adapter", zap.Any("receiveAdapter", ra))
	}
	return ra, nil
}

func (r *Reconciler) podSpecChanged(oldPodSpec corev1.PodSpec, newPodSpec corev1.PodSpec) bool {
	// Since the Deployment spec has fields defaulted by the webhook, it won't
	// be equal to expected. Use DeepDerivative to compare only the fields that
	// are set in newPodSpec.
	if !equality.Semantic.DeepDerivative(newPodSpec, oldPodSpec) {
		return true
	}
	if len(oldPodSpec.Containers) != len(newPodSpec.Containers) {
		return true
	}
	for i := range newPodSpec.Containers {
		if !equality.Semantic.DeepEqual(newPodSpec.Containers[i].Env, oldPodSpec.Containers[i].Env) {
			return true
		}
	}
	return false
}

func (r *Reconciler) marshalCeOverrides(ctx context.Context, source *v1alpha1.ContainerSource) string {
	var ceOverrides string
	if source.Spec.CloudEventOverrides != nil {
		if co, err := json.Marshal(source.Spec.CloudEventOverrides); err != nil {
			logging.FromContext(ctx).Error("Failed to marshal CloudEventOverrides into JSON", zap.Any("source", source), zap.Error(err))
		} else if len(co) > 0 {
			ceOverrides = string(co)
		}
	}
	return ceOverrides
}
