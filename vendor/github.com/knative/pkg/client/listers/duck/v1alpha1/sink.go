/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/pkg/apis/duck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SinkLister helps list Sinks.
type SinkLister interface {
	// List lists all Sinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Sink, err error)
	// Sinks returns an object that can list and get Sinks.
	Sinks(namespace string) SinkNamespaceLister
	SinkListerExpansion
}

// sinkLister implements the SinkLister interface.
type sinkLister struct {
	indexer cache.Indexer
}

// NewSinkLister returns a new SinkLister.
func NewSinkLister(indexer cache.Indexer) SinkLister {
	return &sinkLister{indexer: indexer}
}

// List lists all Sinks in the indexer.
func (s *sinkLister) List(selector labels.Selector) (ret []*v1alpha1.Sink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sink))
	})
	return ret, err
}

// Sinks returns an object that can list and get Sinks.
func (s *sinkLister) Sinks(namespace string) SinkNamespaceLister {
	return sinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SinkNamespaceLister helps list and get Sinks.
type SinkNamespaceLister interface {
	// List lists all Sinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Sink, err error)
	// Get retrieves the Sink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Sink, error)
	SinkNamespaceListerExpansion
}

// sinkNamespaceLister implements the SinkNamespaceLister
// interface.
type sinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sinks in the indexer for a given namespace.
func (s sinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sink))
	})
	return ret, err
}

// Get retrieves the Sink from the indexer for a given namespace and name.
func (s sinkNamespaceLister) Get(name string) (*v1alpha1.Sink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sink"), name)
	}
	return obj.(*v1alpha1.Sink), nil
}
