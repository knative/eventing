/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/pkg/apis/duck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelableRefLister helps list ChannelableReves.
type ChannelableRefLister interface {
	// List lists all ChannelableReves in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelableRef, err error)
	// ChannelableReves returns an object that can list and get ChannelableReves.
	ChannelableReves(namespace string) ChannelableRefNamespaceLister
	ChannelableRefListerExpansion
}

// channelableRefLister implements the ChannelableRefLister interface.
type channelableRefLister struct {
	indexer cache.Indexer
}

// NewChannelableRefLister returns a new ChannelableRefLister.
func NewChannelableRefLister(indexer cache.Indexer) ChannelableRefLister {
	return &channelableRefLister{indexer: indexer}
}

// List lists all ChannelableReves in the indexer.
func (s *channelableRefLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelableRef, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelableRef))
	})
	return ret, err
}

// ChannelableReves returns an object that can list and get ChannelableReves.
func (s *channelableRefLister) ChannelableReves(namespace string) ChannelableRefNamespaceLister {
	return channelableRefNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelableRefNamespaceLister helps list and get ChannelableReves.
type ChannelableRefNamespaceLister interface {
	// List lists all ChannelableReves in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelableRef, err error)
	// Get retrieves the ChannelableRef from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ChannelableRef, error)
	ChannelableRefNamespaceListerExpansion
}

// channelableRefNamespaceLister implements the ChannelableRefNamespaceLister
// interface.
type channelableRefNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelableReves in the indexer for a given namespace.
func (s channelableRefNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelableRef, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelableRef))
	})
	return ret, err
}

// Get retrieves the ChannelableRef from the indexer for a given namespace and name.
func (s channelableRefNamespaceLister) Get(name string) (*v1alpha1.ChannelableRef, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelableref"), name)
	}
	return obj.(*v1alpha1.ChannelableRef), nil
}
